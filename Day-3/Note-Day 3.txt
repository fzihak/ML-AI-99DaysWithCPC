Lists
Description: Lists are one of the most flexible data structures in Python. They can hold an ordered collection of items, which can be of different types (e.g., integers, strings, other lists).

Syntax: Lists are defined by square brackets, [], and items are separated by commas.
my_list = [1, 2, 3, "apple", "banana"]


Properties:
Ordered: Elements have a defined order.
Mutable: You can change, add, or remove elements after the list is created.


Common Operations:
Access: my_list[0] gives the first element, 1.
Add: my_list.append(4) adds 4 to the end.
Remove: my_list.remove("apple") removes "apple" from the list.
Slicing: my_list[1:3] gives [2, 3].

2. Tuples
Description: Tuples are like lists, but they are immutable, meaning you can't modify them after creation.

Syntax: Tuples are created with parentheses, ().
my_tuple = (1, 2, 3, "apple", "banana")


Properties:
Ordered: Elements have a defined order.
Immutable: Once created, elements can't be changed, added, or removed.
Use Cases: Tuples are often used for fixed data that shouldn’t change, like coordinates or data records.

3. Dictionaries
Description: Dictionaries are key-value pairs, where each key is associated with a value. They’re useful when you need to look up data based on a unique key.

Syntax: Created using curly braces, {}, with key-value pairs separated by a colon :.
my_dict = {"name": "Alice", "age": 25, "city": "New York"}


Properties:
Unordered: In older versions of Python (<3.7), dictionaries were unordered, but now they maintain insertion order.
Mutable: You can add, modify, or delete key-value pairs.
Common Operations:

Access: my_dict["name"] gives "Alice".
Add/Update: my_dict["age"] = 26 changes the age to 26.
Remove: my_dict.pop("city") removes the key "city".
4. Sets
Description: Sets are collections of unique elements, meaning they automatically remove duplicates. They’re great for operations involving membership testing, like finding common elements in multiple sets.

Syntax: Sets are created with curly braces, {}, or with the set() function.
my_set = {1, 2, 3, 3, 4}  # duplicates are removed automatically


Properties:
Unordered: Elements have no defined order.
Unique: No duplicate values are allowed.
Mutable: You can add or remove elements, but you can’t access elements by index (since there’s no order).
Common Operations:

Add: my_set.add(5) adds 5 to the set.
Remove: my_set.remove(3) removes 3.
Set Operations: Sets support mathematical operations like union (|), intersection (&), and difference (-).

5. Other Notable Structures
Strings: Technically, strings aren’t complex data structures, but they are sequences of characters and support indexing and slicing like lists.
Arrays: Arrays are available via the array module or through libraries like NumPy. They’re similar to lists but are more memory-efficient and generally only hold elements of the same type.


#Choosing the Right Data Structure#
Use lists when you need a mutable collection of items in a specific order.
Use tuples when you want an ordered, unchangeable collection.
Use dictionaries for fast lookups, data storage by unique keys, and quick updates.
Use sets when you need unique items or need to perform set-like operations.